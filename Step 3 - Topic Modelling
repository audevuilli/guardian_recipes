{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Guardian 2 - Topic Modelling.ipynb","provenance":[{"file_id":"1UeSos__m6_F4nXxnAkQfryb1L45kd8si","timestamp":1573373356134},{"file_id":"123pwgonglCTBIO7QWGhlyjEKbdHJ6CM1","timestamp":1570560845414},{"file_id":"1Uax4onpIc8oS4hV5L2OpADxe0wjK18eI","timestamp":1568034097413},{"file_id":"1m0XAcBFXVZy84rB6-nuvBDTBieH4KZsG","timestamp":1567944133592},{"file_id":"1F-hLbiICcCofB1PgnnSGXVIeM1s9lMuL","timestamp":1567674812829},{"file_id":"1DuSFJ-gO2W8XHNNm-XiOAgU1XvizeuRz","timestamp":1567509985693},{"file_id":"1XV3K3OA4PKMgvU8HvxfvcgI4GQT8nafg","timestamp":1567441523161},{"file_id":"1SYnRBRUYxBnP6js6ksZkCrU-aR25tRgr","timestamp":1567425018871}],"collapsed_sections":["_bNepOvTyL0M","MHzefG9_UAG_"],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"51rybjJS3gAa","colab_type":"text"},"source":["### Authentification Google\n"]},{"cell_type":"code","metadata":{"id":"yO6t15yAyD1F","colab_type":"code","outputId":"04663574-dc27-4e47-c035-d41e606344c3","executionInfo":{"status":"ok","timestamp":1573911237052,"user_tz":0,"elapsed":8423,"user":{"displayName":"Aude Vuilli","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBvb7DVNjMBgsPLogqP6L69Z5SUiqMzjmazn2aI=s64","userId":"08053235329720588301"}},"colab":{"base_uri":"https://localhost:8080/","height":303}},"source":["!pip install clean-text[gpl]"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Collecting clean-text[gpl]\n","  Downloading https://files.pythonhosted.org/packages/23/98/2650271bc1052002ad7e61595f7a44ff24f6bb4eb24d9c0e42e92c991708/clean_text-0.1.1-py3-none-any.whl\n","Collecting ftfy\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/75/ca/2d9a5030eaf1bcd925dab392762b9709a7ad4bd486a90599d93cd79cb188/ftfy-5.6.tar.gz (58kB)\n","\u001b[K     |████████████████████████████████| 61kB 4.4MB/s \n","\u001b[?25hCollecting unidecode; extra == \"gpl\"\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/d0/42/d9edfed04228bacea2d824904cae367ee9efd05e6cce7ceaaedd0b0ad964/Unidecode-1.1.1-py2.py3-none-any.whl (238kB)\n","\u001b[K     |████████████████████████████████| 245kB 14.6MB/s \n","\u001b[?25hRequirement already satisfied: wcwidth in /usr/local/lib/python3.6/dist-packages (from ftfy->clean-text[gpl]) (0.1.7)\n","Building wheels for collected packages: ftfy\n","  Building wheel for ftfy (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for ftfy: filename=ftfy-5.6-cp36-none-any.whl size=44553 sha256=30a17d13d5e71c146b60c5a34ef0b5086c6dc689c34094ad7849bf79d3c16ab9\n","  Stored in directory: /root/.cache/pip/wheels/43/34/ce/cbb38d71543c408de56f3c5e26ce8ba495a0fa5a28eaaf1046\n","Successfully built ftfy\n","Installing collected packages: ftfy, unidecode, clean-text\n","Successfully installed clean-text-0.1.1 ftfy-5.6 unidecode-1.1.1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"UMO4Pgfs3NXa","colab_type":"code","colab":{}},"source":["# import the necessary library\n","import pandas as pd\n","import numpy as np "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"aOhpst7wzDKn","colab_type":"code","colab":{}},"source":["# importing the necessary library\n","from datetime import datetime\n","import re\n","import string\n","import os \n","from pprint import pprint\n","from cleantext import clean\n","\n","from nltk.tokenize import RegexpTokenizer  \n","from nltk.corpus import stopwords  \n","from nltk.tokenize import word_tokenize\n","from nltk.stem import WordNetLemmatizer\n","\n","# Matplotlib Graphs\n","import matplotlib.pyplot as plt\n","%matplotlib inline"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"foOwVA7640lk","colab_type":"code","colab":{}},"source":["import nltk\n","nltk.download('punkt')\n","nltk.download('stopwords')\n","nltk.download('wordnet')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hWV_EU4R3toe","colab_type":"code","colab":{}},"source":["# Authentification with google drive and colab\n","from google.colab import auth\n","auth.authenticate_user()\n","print('Authenticated')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7HiYJr813-41","colab_type":"code","colab":{}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TfBGsDCq1ZV8","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import numpy as np\n","\n","pd.options.display.max_columns = 400 # this will set limit of columns to 500\n","pd.options.display.max_rows = 300 # this will set limit of columns to 500\n","\n","# pd.options.display.max_colwidth\n","#pd.options.display.max_colwidth = 100\n","pd.options.display.max_colwidth = 80"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8u2A-2Y9nOzH","colab_type":"text"},"source":["## Step2: Topic Modeling - Guardian Recipes Categorization\n","1. Gensim Doc2Vec\n","2. LDA Model"]},{"cell_type":"code","metadata":{"id":"WSp4_QAvvTy0","colab_type":"code","colab":{}},"source":["# Gensim\n","import gensim\n","import gensim.corpora as corpora\n","from gensim.utils import simple_preprocess\n","from gensim.models import CoherenceModel\n","from gensim.models import Phrases\n","from gensim.models.phrases import Phraser # for bigrams, trigrams"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"WxGkDMjETklr","colab_type":"code","colab":{}},"source":["# read the new data!\n","data = pd.read_csv('drive/My Drive/Personal Projects/2019/Guardian/data/clean_data.csv')\n","data = data.drop(columns={'Unnamed: 0'})"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"zKEI_e5gxcZr","colab_type":"code","outputId":"539696a2-d272-4c6b-e779-67cb5b7a663e","executionInfo":{"status":"ok","timestamp":1573911299842,"user_tz":0,"elapsed":6809,"user":{"displayName":"Aude Vuilli","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBvb7DVNjMBgsPLogqP6L69Z5SUiqMzjmazn2aI=s64","userId":"08053235329720588301"}},"colab":{"base_uri":"https://localhost:8080/","height":281}},"source":["data.head(1)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>headline_list</th>\n","      <th>category</th>\n","      <th>author</th>\n","      <th>subtitle</th>\n","      <th>article_content</th>\n","      <th>comments_number</th>\n","      <th>share_number</th>\n","      <th>url</th>\n","      <th>year</th>\n","      <th>month</th>\n","      <th>day</th>\n","      <th>clean_headline_list</th>\n","      <th>nostop_words_clean_headline_list</th>\n","      <th>token_headline_list</th>\n","      <th>clean_subtitle</th>\n","      <th>nostop_words_clean_subtitle</th>\n","      <th>token_subtitle</th>\n","      <th>clean_article_content</th>\n","      <th>nostop_words_clean_article_content</th>\n","      <th>token_article_content</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>18/10/2008</td>\n","      <td>Good fast food</td>\n","      <td>Cooking for kids</td>\n","      <td>none</td>\n","      <td>It's that familiar scene: hardly any food in the house but a gaggle of hungr...</td>\n","      <td>Stringy stretchy omelettes\\nEggs are obviously sent from heaven for tired pa...</td>\n","      <td>No Comments</td>\n","      <td>0</td>\n","      <td>https://www.theguardian.com/lifeandstyle/2008/oct/18/healthy-fast-food</td>\n","      <td>2008</td>\n","      <td>October</td>\n","      <td>18</td>\n","      <td>good fast food</td>\n","      <td>good fast food</td>\n","      <td>['good', 'fast', 'food']</td>\n","      <td>it is that familiar scene hardly any food in the house but a gaggle of hungr...</td>\n","      <td>familiar scene hardly food house gaggle hungry children feed simple solutions</td>\n","      <td>['familiar', 'scene', 'hardly', 'food', 'house', 'gaggle', 'hungry', 'childr...</td>\n","      <td>stringy stretchy omelettes eggs are obviously sent from heaven for tired par...</td>\n","      <td>stringy stretchy omelettes eggs obviously sent heaven tired parents omelette...</td>\n","      <td>['stringy', 'stretchy', 'omelettes', 'eggs', 'obviously', 'sent', 'heaven', ...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         date   headline_list          category author  \\\n","0  18/10/2008  Good fast food  Cooking for kids   none   \n","\n","                                                                          subtitle  \\\n","0  It's that familiar scene: hardly any food in the house but a gaggle of hungr...   \n","\n","                                                                   article_content  \\\n","0  Stringy stretchy omelettes\\nEggs are obviously sent from heaven for tired pa...   \n","\n","  comments_number share_number  \\\n","0     No Comments            0   \n","\n","                                                                      url  \\\n","0  https://www.theguardian.com/lifeandstyle/2008/oct/18/healthy-fast-food   \n","\n","   year    month day clean_headline_list nostop_words_clean_headline_list  \\\n","0  2008  October  18      good fast food                   good fast food   \n","\n","        token_headline_list  \\\n","0  ['good', 'fast', 'food']   \n","\n","                                                                    clean_subtitle  \\\n","0  it is that familiar scene hardly any food in the house but a gaggle of hungr...   \n","\n","                                                     nostop_words_clean_subtitle  \\\n","0  familiar scene hardly food house gaggle hungry children feed simple solutions   \n","\n","                                                                    token_subtitle  \\\n","0  ['familiar', 'scene', 'hardly', 'food', 'house', 'gaggle', 'hungry', 'childr...   \n","\n","                                                             clean_article_content  \\\n","0  stringy stretchy omelettes eggs are obviously sent from heaven for tired par...   \n","\n","                                                nostop_words_clean_article_content  \\\n","0  stringy stretchy omelettes eggs obviously sent heaven tired parents omelette...   \n","\n","                                                             token_article_content  \n","0  ['stringy', 'stretchy', 'omelettes', 'eggs', 'obviously', 'sent', 'heaven', ...  "]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"TxInRmqAVBam","colab_type":"code","outputId":"a710afe1-5de9-474f-a7af-a171e8f952a7","executionInfo":{"status":"ok","timestamp":1573297066611,"user_tz":-60,"elapsed":762,"user":{"displayName":"Aude Vuilli","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBvb7DVNjMBgsPLogqP6L69Z5SUiqMzjmazn2aI=s64","userId":"08053235329720588301"}},"colab":{"base_uri":"https://localhost:8080/","height":33}},"source":["print('Number of articles: ' + str(len(data)))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Number of articles: 7342\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"xTMmQMlCvU6o","colab_type":"code","colab":{}},"source":["## Check for missing values\n","data.isna().sum()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wzkH4H7jvkfM","colab_type":"code","colab":{}},"source":["## Remove the missing values (null url) - Select only raw data\n","data.url = pd.np.where(pd.isna(data.url), '', data.url)\n","data = data[['date','headline_list','category','author','subtitle','article_content','url']]"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oMVDfqqOw-Lv","colab_type":"text"},"source":["### Get the content clean\n","Selection Date (year, month, day), selection content (title, content), selection tags\n","\n","1. Remove the punctuations\n","  - Remove [-!?+-\"/><()|&'=\"]\n","  - Remove currency [$ £]\n","  - Remove number [0-9]\n","2. Tokenize the text\n","3. Remove the stopwords (e.g. the, or, and)\n","4. Lemmatize the text (applications -> application / going -> go)\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"d39pqi8mxVok","colab_type":"code","colab":{}},"source":["data['allcontent'] = data[['subtitle','article_content']].apply(lambda x: ' '.join(x), axis=1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"FCMdjH9Mxktj","colab_type":"code","outputId":"e9dea47f-b064-44a1-8576-9df875837524","executionInfo":{"status":"ok","timestamp":1573911309181,"user_tz":0,"elapsed":469,"user":{"displayName":"Aude Vuilli","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBvb7DVNjMBgsPLogqP6L69Z5SUiqMzjmazn2aI=s64","userId":"08053235329720588301"}},"colab":{"base_uri":"https://localhost:8080/","height":394}},"source":["data.head(2)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>headline_list</th>\n","      <th>category</th>\n","      <th>author</th>\n","      <th>subtitle</th>\n","      <th>article_content</th>\n","      <th>url</th>\n","      <th>allcontent</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>18/10/2008</td>\n","      <td>Good fast food</td>\n","      <td>Cooking for kids</td>\n","      <td>none</td>\n","      <td>It's that familiar scene: hardly any food in the house but a gaggle of hungr...</td>\n","      <td>Stringy stretchy omelettes\\nEggs are obviously sent from heaven for tired pa...</td>\n","      <td>https://www.theguardian.com/lifeandstyle/2008/oct/18/healthy-fast-food</td>\n","      <td>It's that familiar scene: hardly any food in the house but a gaggle of hungr...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>18/10/2008</td>\n","      <td>Top 10</td>\n","      <td>Cooking for kids</td>\n","      <td>none</td>\n","      <td>Sandwich fillings</td>\n","      <td>1 Cheese and tomato\\n2 Apple slaw: mix mayonnaise, lemon juice, grated chees...</td>\n","      <td>https://www.theguardian.com/lifeandstyle/2008/oct/18/sandwich-fillings-for-kids</td>\n","      <td>Sandwich fillings 1 Cheese and tomato\\n2 Apple slaw: mix mayonnaise, lemon j...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         date   headline_list          category author  \\\n","0  18/10/2008  Good fast food  Cooking for kids   none   \n","1  18/10/2008          Top 10  Cooking for kids   none   \n","\n","                                                                          subtitle  \\\n","0  It's that familiar scene: hardly any food in the house but a gaggle of hungr...   \n","1                                                                Sandwich fillings   \n","\n","                                                                   article_content  \\\n","0  Stringy stretchy omelettes\\nEggs are obviously sent from heaven for tired pa...   \n","1  1 Cheese and tomato\\n2 Apple slaw: mix mayonnaise, lemon juice, grated chees...   \n","\n","                                                                               url  \\\n","0           https://www.theguardian.com/lifeandstyle/2008/oct/18/healthy-fast-food   \n","1  https://www.theguardian.com/lifeandstyle/2008/oct/18/sandwich-fillings-for-kids   \n","\n","                                                                        allcontent  \n","0  It's that familiar scene: hardly any food in the house but a gaggle of hungr...  \n","1  Sandwich fillings 1 Cheese and tomato\\n2 Apple slaw: mix mayonnaise, lemon j...  "]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"LK95xLDCxnnv","colab_type":"code","colab":{}},"source":["# remove punctuation\n","#data['subtitle_clean'] = data.subtitle.apply(lambda x: clean(x, \n","#                                          no_punct=True, no_currency_symbols=True, no_numbers=True, \n","#                                          replace_with_number=\"\",replace_with_currency_symbol=\"\"))\n","#data['article_clean'] = data.article_content.apply(lambda x: clean(x, \n","#                                          no_punct=True, no_currency_symbols=True, no_numbers=True, \n","#                                          replace_with_number=\"\",replace_with_currency_symbol=\"\"))\n","data['allcontent_clean'] = data.allcontent.apply(lambda x: clean(x, \n","                                          no_punct=True, no_currency_symbols=True, no_numbers=True, \n","                                          replace_with_number=\"\",replace_with_currency_symbol=\"\"))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jqmE4hsI2emO","colab_type":"code","colab":{}},"source":["# Remove the \\n space\n","data['allcontent_clean'] = data['allcontent_clean'].apply(lambda x: ' '.join([word for word in x.split() if word not in (['\\n'])]))\n","#data['article_clean'] = data['article_clean'].apply(lambda x: ' '.join([word for word in x.split() if word not in (['\\n'])]))\n","#data['subtitle_clean'] = data['subtitle_clean'].apply(lambda x: ' '.join([word for word in x.split() if word not in (['\\n'])]))\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Eg0pw4LDYvdw","colab_type":"code","colab":{}},"source":["data['allcontent_clean'] = data['allcontent_clean'].str.replace(r'sionce youre here.*','')\n","data['allcontent_clean'] = data['allcontent_clean'].str.replace(r'since youre here.*','')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Qaw45FzFyUqf","colab_type":"code","colab":{}},"source":["# tokenize the content\n","data['allcontent_token'] = data.allcontent_clean.apply(word_tokenize)\n","#data['article_token'] = data.subtitle_clean.apply(word_tokenize)\n","#data['subtitle_token'] = data.article_clean.apply(word_tokenize)\n","\n","# data nostop words\n","stop = stopwords.words('english') + ['|','+','-','~','$','g','ml','f','kg','c','cm','p','oz','x','pm','mm','tsp','tbsp','z','facebook','twitter','guardian','pinterest','cloake','photograph','felicity','affiliate','links','article','contains','clicking','minute','add','serve']\n","data['allcontent_clean'] = data['allcontent_clean'].str.replace(r'\\d','')\n","data['allcontent_noStopWords'] = data['allcontent_clean'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop)]))\n","\n","# data nostop words\n","data['allcontent_token_nostops'] = data.allcontent_noStopWords.apply(word_tokenize)\n","\n","# Lemmatize\n","lemmatizer = WordNetLemmatizer()\n","data['allcontent_lemmatized'] = data['allcontent_token_nostops'].apply(lambda lem: [lemmatizer.lemmatize(w) for w in lem])\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_bNepOvTyL0M","colab_type":"text"},"source":["#### Create Bigrams and Trigrams\n"]},{"cell_type":"code","metadata":{"id":"75d396iGA_5V","colab_type":"code","outputId":"169c9d8f-1287-4020-8328-166bbef5a602","executionInfo":{"status":"ok","timestamp":1573911562341,"user_tz":0,"elapsed":221279,"user":{"displayName":"Aude Vuilli","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBvb7DVNjMBgsPLogqP6L69Z5SUiqMzjmazn2aI=s64","userId":"08053235329720588301"}},"colab":{"base_uri":"https://localhost:8080/","height":70}},"source":["# select the text to create bigrams, trigrams\n","text_data =data['allcontent_token_nostops']\n","\n","# Build the bigram and trigram models\n","bigram = Phrases(text_data, min_count=2) \n","trigram = Phrases(bigram[text_data], min_count=2)  \n","\n","# Faster way to get a sentence clubbed as a trigram/bigram\n","bigram_mod = Phraser(bigram)\n","trigram_mod = Phraser(trigram)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/gensim/models/phrases.py:598: UserWarning: For a faster implementation, use the gensim.models.phrases.Phraser class\n","  warnings.warn(\"For a faster implementation, use the gensim.models.phrases.Phraser class\")\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"-P-M6-vgBLdv","colab_type":"code","colab":{}},"source":["new_bigram = []\n","new_trigram = []  \n","\n","for i in bigram_mod[text_data]:  \n","  new_bigram.append(i)\n","for i in trigram_mod[bigram_mod[text_data]]:  \n","  new_trigram.append(i)\n","\n","## save bigrams, trigrams into dataframe:\n","# bigrams\n","data['bigrams'] = new_bigram\n","# trigrams\n","data['trigrams'] = new_trigram\n","\n","## Lemmatized bigrams and trigrams\n","data['bigrams_lem'] = data['bigrams'].apply(lambda lem: [lemmatizer.lemmatize(w) for w in lem]) \n","data['trigrams_lem'] = data['trigrams'].apply(lambda lem: [lemmatizer.lemmatize(w) for w in lem]) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"J-uL6b5T3z92","colab_type":"code","outputId":"49eeb1fa-f42c-437a-cb35-26beb7c332b6","executionInfo":{"status":"ok","timestamp":1573911630496,"user_tz":0,"elapsed":486,"user":{"displayName":"Aude Vuilli","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBvb7DVNjMBgsPLogqP6L69Z5SUiqMzjmazn2aI=s64","userId":"08053235329720588301"}},"colab":{"base_uri":"https://localhost:8080/","height":281}},"source":["data.head(1)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>headline_list</th>\n","      <th>category</th>\n","      <th>author</th>\n","      <th>subtitle</th>\n","      <th>article_content</th>\n","      <th>url</th>\n","      <th>allcontent</th>\n","      <th>allcontent_clean</th>\n","      <th>allcontent_token</th>\n","      <th>allcontent_noStopWords</th>\n","      <th>allcontent_token_nostops</th>\n","      <th>allcontent_lemmatized</th>\n","      <th>bigrams</th>\n","      <th>trigrams</th>\n","      <th>bigrams_lem</th>\n","      <th>trigrams_lem</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>18/10/2008</td>\n","      <td>Good fast food</td>\n","      <td>Cooking for kids</td>\n","      <td>none</td>\n","      <td>It's that familiar scene: hardly any food in the house but a gaggle of hungr...</td>\n","      <td>Stringy stretchy omelettes\\nEggs are obviously sent from heaven for tired pa...</td>\n","      <td>https://www.theguardian.com/lifeandstyle/2008/oct/18/healthy-fast-food</td>\n","      <td>It's that familiar scene: hardly any food in the house but a gaggle of hungr...</td>\n","      <td>its that familiar scene hardly any food in the house but a gaggle of hungry ...</td>\n","      <td>[its, that, familiar, scene, hardly, any, food, in, the, house, but, a, gagg...</td>\n","      <td>familiar scene hardly food house gaggle hungry children feed simple solution...</td>\n","      <td>[familiar, scene, hardly, food, house, gaggle, hungry, children, feed, simpl...</td>\n","      <td>[familiar, scene, hardly, food, house, gaggle, hungry, child, feed, simple, ...</td>\n","      <td>[familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...</td>\n","      <td>[familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...</td>\n","      <td>[familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...</td>\n","      <td>[familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         date   headline_list          category author  \\\n","0  18/10/2008  Good fast food  Cooking for kids   none   \n","\n","                                                                          subtitle  \\\n","0  It's that familiar scene: hardly any food in the house but a gaggle of hungr...   \n","\n","                                                                   article_content  \\\n","0  Stringy stretchy omelettes\\nEggs are obviously sent from heaven for tired pa...   \n","\n","                                                                      url  \\\n","0  https://www.theguardian.com/lifeandstyle/2008/oct/18/healthy-fast-food   \n","\n","                                                                        allcontent  \\\n","0  It's that familiar scene: hardly any food in the house but a gaggle of hungr...   \n","\n","                                                                  allcontent_clean  \\\n","0  its that familiar scene hardly any food in the house but a gaggle of hungry ...   \n","\n","                                                                  allcontent_token  \\\n","0  [its, that, familiar, scene, hardly, any, food, in, the, house, but, a, gagg...   \n","\n","                                                            allcontent_noStopWords  \\\n","0  familiar scene hardly food house gaggle hungry children feed simple solution...   \n","\n","                                                          allcontent_token_nostops  \\\n","0  [familiar, scene, hardly, food, house, gaggle, hungry, children, feed, simpl...   \n","\n","                                                             allcontent_lemmatized  \\\n","0  [familiar, scene, hardly, food, house, gaggle, hungry, child, feed, simple, ...   \n","\n","                                                                           bigrams  \\\n","0  [familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...   \n","\n","                                                                          trigrams  \\\n","0  [familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...   \n","\n","                                                                       bigrams_lem  \\\n","0  [familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...   \n","\n","                                                                      trigrams_lem  \n","0  [familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...  "]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"code","metadata":{"id":"wQ-BGg9n1G5K","colab_type":"code","colab":{}},"source":["data.to_csv('drive/My Drive/Personal Projects/2019/Guardian/data/step1_cleandata.csv')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MHzefG9_UAG_","colab_type":"text"},"source":["#### Get an understanding of the word frequency in each article"]},{"cell_type":"code","metadata":{"id":"jCFOBvALt8o-","colab_type":"code","colab":{}},"source":["## calculate the median, mean number of words\n","print('Average number of words: ' +str(round(data['allcontent_lemmatized'].mean(),0)))\n","print('Median number of words: ' +str(data['allcontent_lemmatized'].median()))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"mAW3oyayybcE","colab_type":"code","colab":{}},"source":["import matplotlib.pyplot as plt\n","\n","def get_num_words_per_sample(sample_texts):\n","    \"\"\"Returns the median number of words per sample given corpus.\n","    # Arguments\n","        sample_texts: list, sample texts.\n","    # Returns\n","        int, median number of words per sample.\n","    \"\"\"\n","    num_words = [len(s.split()) for s in sample_texts]\n","    return np.median(num_words)\n","  \n","def plot_sample_length_distribution(sample_texts):\n","    \"\"\"Plots the sample length distribution.\n","\n","    # Arguments\n","        samples_texts: list, sample texts.\n","    \"\"\"\n","    plt.hist([len(s) for s in sample_texts], 50)\n","    plt.xlabel('Length of a sample')\n","    plt.ylabel('Number of samples')\n","    plt.title('Sample length distribution')\n","    plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5Wg1ScQkyqQo","colab_type":"code","outputId":"74942a88-f804-4f1a-cec9-522b5119a0e4","executionInfo":{"status":"ok","timestamp":1573307822243,"user_tz":-60,"elapsed":1117,"user":{"displayName":"Aude Vuilli","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBvb7DVNjMBgsPLogqP6L69Z5SUiqMzjmazn2aI=s64","userId":"08053235329720588301"}},"colab":{"base_uri":"https://localhost:8080/","height":33}},"source":["# Get the number of words in the sample (with stopwords)\n","get_num_words_per_sample(data.allcontent_clean)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["992.5"]},"metadata":{"tags":[]},"execution_count":99}]},{"cell_type":"code","metadata":{"id":"ZilayjETzRLZ","colab_type":"code","outputId":"146a5eb1-9d08-4ac0-8347-5e182d7e21b7","executionInfo":{"status":"ok","timestamp":1573307823697,"user_tz":-60,"elapsed":900,"user":{"displayName":"Aude Vuilli","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBvb7DVNjMBgsPLogqP6L69Z5SUiqMzjmazn2aI=s64","userId":"08053235329720588301"}},"colab":{"base_uri":"https://localhost:8080/","height":294}},"source":["# plot sample length distribution\n","plot_sample_length_distribution(data.allcontent_clean)"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"leQDkyRvyDB1","colab_type":"text"},"source":["### Number of Topics - Coherence Function"]},{"cell_type":"code","metadata":{"id":"7RD0FC6fCkjt","colab_type":"code","colab":{}},"source":["import pickle"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"LlMVn1_Y_QMO","colab_type":"code","outputId":"bae790d5-7285-45a7-a386-b58dfc82a323","executionInfo":{"status":"ok","timestamp":1573911641582,"user_tz":0,"elapsed":6631,"user":{"displayName":"Aude Vuilli","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBvb7DVNjMBgsPLogqP6L69Z5SUiqMzjmazn2aI=s64","userId":"08053235329720588301"}},"colab":{"base_uri":"https://localhost:8080/","height":53}},"source":["# create the dictionary\n","dictionary = corpora.Dictionary(data['bigrams_lem'])\n","# filter the words \n","## words appearing only in less than 1% of the documents\n","## words appearing in more than 90% of all documents\n","dictionary.filter_extremes(no_below=70, no_above=0.95)\n","\n","# create Corpus\n","text_data = list(data['bigrams_lem'])\n","\n","# create the corpus (term document frequency)\n","corpus = [dictionary.doc2bow(text) for text in text_data]\n","\n","# View\n","print(corpus[:1])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[[(0, 1), (1, 1), (2, 2), (3, 1), (4, 2), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 2), (16, 2), (17, 1), (18, 1), (19, 4), (20, 3), (21, 6), (22, 1), (23, 1), (24, 1), (25, 5), (26, 1), (27, 1), (28, 1), (29, 1), (30, 2), (31, 1), (32, 1), (33, 1), (34, 2), (35, 1), (36, 1), (37, 1), (38, 5), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 2), (46, 2), (47, 1), (48, 13), (49, 4), (50, 4), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 2), (57, 12), (58, 1), (59, 1), (60, 1), (61, 1), (62, 3), (63, 2), (64, 2), (65, 2), (66, 1), (67, 1), (68, 2), (69, 4), (70, 1), (71, 3), (72, 1), (73, 2), (74, 2), (75, 1), (76, 1), (77, 8), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 2), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 5), (96, 2), (97, 1), (98, 1), (99, 6), (100, 2), (101, 1), (102, 2), (103, 1), (104, 1), (105, 1), (106, 4), (107, 2), (108, 1), (109, 1), (110, 2), (111, 1), (112, 4), (113, 2), (114, 2), (115, 4), (116, 2), (117, 3), (118, 1), (119, 3), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 5), (127, 2), (128, 1), (129, 1), (130, 1), (131, 3), (132, 2), (133, 2), (134, 2), (135, 1), (136, 6), (137, 1), (138, 1), (139, 1), (140, 1), (141, 2), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 2), (149, 1), (150, 2), (151, 1), (152, 1), (153, 2), (154, 1), (155, 1), (156, 2), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 3), (163, 1), (164, 1), (165, 1), (166, 2), (167, 1), (168, 2), (169, 1), (170, 10), (171, 2), (172, 2), (173, 1), (174, 1), (175, 1), (176, 2), (177, 1), (178, 2), (179, 1), (180, 1), (181, 1), (182, 5), (183, 1), (184, 5), (185, 5), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 8), (193, 9), (194, 1), (195, 1), (196, 1), (197, 1), (198, 2), (199, 4), (200, 1), (201, 5), (202, 6), (203, 4), (204, 9), (205, 1), (206, 2), (207, 2), (208, 8), (209, 3), (210, 1), (211, 1), (212, 5), (213, 2), (214, 4), (215, 1), (216, 3), (217, 1), (218, 4), (219, 1), (220, 1), (221, 1), (222, 4), (223, 1), (224, 1), (225, 1), (226, 1), (227, 3), (228, 1), (229, 2), (230, 1), (231, 1), (232, 1), (233, 5), (234, 2), (235, 1), (236, 1), (237, 1), (238, 1), (239, 11), (240, 2), (241, 3), (242, 1), (243, 1), (244, 3), (245, 1), (246, 3), (247, 1), (248, 2), (249, 2), (250, 1), (251, 1), (252, 1), (253, 1), (254, 1), (255, 2), (256, 1), (257, 5), (258, 1), (259, 1), (260, 1), (261, 1), (262, 1), (263, 1), (264, 1), (265, 1), (266, 1), (267, 1), (268, 1), (269, 1), (270, 2), (271, 1), (272, 1), (273, 2), (274, 1), (275, 1), (276, 2), (277, 1), (278, 1), (279, 2), (280, 2), (281, 1), (282, 1), (283, 1), (284, 1), (285, 1), (286, 1), (287, 1), (288, 1), (289, 1), (290, 1), (291, 1), (292, 1), (293, 8), (294, 1), (295, 2), (296, 1), (297, 1), (298, 1), (299, 1), (300, 1), (301, 1), (302, 1), (303, 5), (304, 1), (305, 1), (306, 1), (307, 1), (308, 3), (309, 1), (310, 1), (311, 1), (312, 2), (313, 6), (314, 1), (315, 1), (316, 5), (317, 1), (318, 2), (319, 3), (320, 2), (321, 4), (322, 1), (323, 1), (324, 1), (325, 2), (326, 1), (327, 1), (328, 1), (329, 11), (330, 7), (331, 1), (332, 1), (333, 1), (334, 1), (335, 4), (336, 5), (337, 2), (338, 1), (339, 1), (340, 2), (341, 1), (342, 2), (343, 2), (344, 3), (345, 1), (346, 1), (347, 1), (348, 1), (349, 1), (350, 1), (351, 4)]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"AwbGu0LhCi7r","colab_type":"code","outputId":"1036019c-f6cd-4eaf-a9f7-8ecf88b86d6d","executionInfo":{"status":"ok","timestamp":1573763746292,"user_tz":0,"elapsed":1097,"user":{"displayName":"Aude Vuilli","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBvb7DVNjMBgsPLogqP6L69Z5SUiqMzjmazn2aI=s64","userId":"08053235329720588301"}},"colab":{"base_uri":"https://localhost:8080/","height":70}},"source":["pickle.dump(corpus, open('corpus.pkl', 'wb'))\n","dictionary.save('dictionary.gensim')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/smart_open/smart_open_lib.py:402: UserWarning: This function is deprecated, use smart_open.open instead. See the migration notes for details: https://github.com/RaRe-Technologies/smart_open/blob/master/README.rst#migrating-to-the-new-open-function\n","  'See the migration notes for details: %s' % _MIGRATION_NOTES_URL\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"-VtnUMwmMdkG","colab_type":"text"},"source":["#### Coherance Score\n"]},{"cell_type":"code","metadata":{"id":"Cg6-u4w5_S4b","colab_type":"code","colab":{}},"source":["## Compute coherence values \n","## Use to determine the number of topic to define with the LDA Model\n","## Define Parameters with 6 Passes, Chunksize of 100\n","\n","def compute_coherence_values(dictionary, corpus, texts, limit, start, step):\n","    \"\"\"\n","    Compute c_v coherence for various number of topics\n","    ----------\n","    Parameters:\n","    dictionary : Gensim dictionary / corpus : Gensim corpus / texts : List of input texts / limit : Max num of topics\n","    ----------\n","    Returns:\n","    model_list : List of LDA topic models\n","    coherence_values : Coherence values corresponding to the LDA model with respective number of topics\n","    \"\"\"\n","    coherence_values = []\n","    model_list = []\n","    for num_topics in range(start, limit, step):\n","        model = gensim.models.ldamulticore.LdaMulticore(corpus=corpus, \n","                                               id2word=dictionary, num_topics=num_topics,\n","                                               random_state=100,chunksize=100,passes=6,\n","                                               per_word_topics=True)\n","        model_list.append(model)\n","        coherencemodel = CoherenceModel(model=model, texts=texts, dictionary=dictionary, coherence='c_v')\n","        coherence_values.append(coherencemodel.get_coherence())\n","\n","    return model_list, coherence_values"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"LxG4AVPWGT2u","colab_type":"code","colab":{}},"source":["# Run the function Coherence Values\n","model_list, coherence_values = compute_coherence_values(dictionary=dictionary, corpus=corpus, texts=text_data, start=10, limit=51, step=10)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_bUvU6tTGWVM","colab_type":"code","outputId":"4c802075-e165-4cbb-d577-1822c277a281","executionInfo":{"status":"ok","timestamp":1573913487711,"user_tz":0,"elapsed":606,"user":{"displayName":"Aude Vuilli","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBvb7DVNjMBgsPLogqP6L69Z5SUiqMzjmazn2aI=s64","userId":"08053235329720588301"}},"colab":{"base_uri":"https://localhost:8080/","height":116}},"source":["for i in range(len(model_list)):\n","  print(model_list[i])\n","  print('Coherence Score: '+ str(coherence_values[i]))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["LdaModel(num_terms=3980, num_topics=22, decay=0.5, chunksize=100)\n","Coherence Score: 0.4713641937526099\n","LdaModel(num_terms=3980, num_topics=26, decay=0.5, chunksize=100)\n","Coherence Score: 0.480078372810618\n","LdaModel(num_terms=3980, num_topics=30, decay=0.5, chunksize=100)\n","Coherence Score: 0.4780113668800797\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"JyXE4L7BGXlM","colab_type":"code","outputId":"4d55cbbf-fb7d-4bad-aee0-1d9dad80d0cb","executionInfo":{"status":"ok","timestamp":1573913507215,"user_tz":0,"elapsed":794,"user":{"displayName":"Aude Vuilli","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBvb7DVNjMBgsPLogqP6L69Z5SUiqMzjmazn2aI=s64","userId":"08053235329720588301"}},"colab":{"base_uri":"https://localhost:8080/","height":278}},"source":["# Show graph \n","limit=31; start=22; step=4;\n","x = range(start, limit, step)\n","plt.plot(x, coherence_values)\n","plt.xlabel(\"Num Topics\")\n","plt.ylabel(\"Coherence score\")\n","plt.legend((\"coherence_values\"), loc='best')\n","plt.show()"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"wliyT7ypUAZI","colab_type":"text"},"source":["### LDA Gensim Multicore\n","\n","- LDA Topic Modelling using Gensim Multicore\n"]},{"cell_type":"code","metadata":{"id":"5TR3u1eUUZ5o","colab_type":"code","colab":{}},"source":["# Gensim\n","from gensim.test.utils import common_corpus, common_dictionary\n","from gensim.test.utils import datapath"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"I1ANx0-TJWde","colab_type":"code","colab":{}},"source":["# LDA Model - Parameters Definition\n","num_topics = 24"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hNgQr0znU5br","colab_type":"code","outputId":"c25cceac-791f-4fff-8805-a114f3c93f68","executionInfo":{"status":"ok","timestamp":1573916549807,"user_tz":0,"elapsed":94474,"user":{"displayName":"Aude Vuilli","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBvb7DVNjMBgsPLogqP6L69Z5SUiqMzjmazn2aI=s64","userId":"08053235329720588301"}},"colab":{"base_uri":"https://localhost:8080/","height":50}},"source":["%time \n","ldamodel = gensim.models.ldamulticore.LdaMulticore(corpus=corpus, \n","                                               id2word=dictionary, num_topics=num_topics,\n","                                    \n","                                               random_state=100,chunksize=100,passes=6,\n","                                               per_word_topics=True)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["CPU times: user 3 µs, sys: 2 µs, total: 5 µs\n","Wall time: 9.54 µs\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"k13OEV82_brB","colab_type":"code","outputId":"95fe12b4-09ab-4958-d094-0ab2a2477bac","executionInfo":{"status":"ok","timestamp":1573916681754,"user_tz":0,"elapsed":221791,"user":{"displayName":"Aude Vuilli","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBvb7DVNjMBgsPLogqP6L69Z5SUiqMzjmazn2aI=s64","userId":"08053235329720588301"}},"colab":{"base_uri":"https://localhost:8080/","height":33}},"source":["coherencemodel = CoherenceModel(model=ldamodel, texts=text_data, dictionary=dictionary, coherence='c_v')\n","print('Topic num. 24, bigrams_lem, coherence score: '+ str(coherencemodel.get_coherence()))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Topic num. 24, bigrams_lem, coherence score: 0.4801110667091761\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vjPmFNxPVuLT","colab_type":"code","outputId":"91f03e89-d23b-4f1c-d115-71a2ebb2f9ac","executionInfo":{"status":"ok","timestamp":1573916823343,"user_tz":0,"elapsed":519,"user":{"displayName":"Aude Vuilli","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBvb7DVNjMBgsPLogqP6L69Z5SUiqMzjmazn2aI=s64","userId":"08053235329720588301"}},"colab":{"base_uri":"https://localhost:8080/","height":836}},"source":["## View the topic --  24 Bigrams\n","ldamodel.show_topics(num_topics=24, num_words=15)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(0,\n","  '0.039*\"dough\" + 0.029*\"flour\" + 0.021*\"make\" + 0.020*\"salt\" + 0.017*\"batter\" + 0.016*\"minute\" + 0.015*\"water\" + 0.015*\"bread\" + 0.012*\"oil\" + 0.011*\"bowl\" + 0.010*\"roll\" + 0.010*\"bun\" + 0.010*\"pancake\" + 0.009*\"warm\" + 0.009*\"mix\"'),\n"," (1,\n","  '0.112*\"egg\" + 0.040*\"pan\" + 0.018*\"cook\" + 0.017*\"butter\" + 0.016*\"heat\" + 0.014*\"yolk\" + 0.013*\"sauce\" + 0.012*\"white\" + 0.011*\"one\" + 0.010*\"water\" + 0.010*\"omelette\" + 0.010*\"put\" + 0.010*\"set\" + 0.010*\"hot\" + 0.009*\"dish\"'),\n"," (2,\n","  '0.018*\"put\" + 0.015*\"minute\" + 0.015*\"oil\" + 0.015*\"heat\" + 0.013*\"salt\" + 0.011*\"bowl\" + 0.010*\"pepper\" + 0.009*\"mix\" + 0.009*\"two\" + 0.007*\"small\" + 0.007*\"half\" + 0.007*\"olive_oil\" + 0.007*\"pan\" + 0.007*\"remaining\" + 0.007*\"large\"'),\n"," (3,\n","  '0.044*\"honey\" + 0.024*\"yoghurt\" + 0.023*\"milk\" + 0.020*\"nut\" + 0.018*\"oat\" + 0.015*\"seed\" + 0.015*\"maple_syrup\" + 0.013*\"make\" + 0.012*\"tahini\" + 0.012*\"breakfast\" + 0.011*\"toast\" + 0.011*\"barley\" + 0.010*\"almond\" + 0.010*\"porridge\" + 0.010*\"butter\"'),\n"," (4,\n","  '0.027*\"sugar\" + 0.018*\"syrup\" + 0.017*\"water\" + 0.016*\"juice\" + 0.015*\"lemon\" + 0.015*\"put\" + 0.015*\"pour\" + 0.014*\"make\" + 0.014*\"orange\" + 0.012*\"fruit\" + 0.009*\"cream\" + 0.009*\"strawberry\" + 0.009*\"bowl\" + 0.008*\"serf\" + 0.008*\"caster_sugar\"'),\n"," (5,\n","  '0.049*\"pastry\" + 0.024*\"filling\" + 0.019*\"butter\" + 0.019*\"tart\" + 0.018*\"pie\" + 0.014*\"minute\" + 0.013*\"make\" + 0.012*\"flour\" + 0.012*\"oven\" + 0.011*\"top\" + 0.009*\"cut\" + 0.009*\"roll\" + 0.009*\"bake_minutes\" + 0.009*\"egg\" + 0.009*\"dough\"'),\n"," (6,\n","  '0.036*\"fish\" + 0.026*\"prawn\" + 0.016*\"mussel\" + 0.015*\"chilli\" + 0.013*\"cook\" + 0.011*\"shell\" + 0.011*\"clam\" + 0.011*\"garlic\" + 0.010*\"pan\" + 0.010*\"sauce\" + 0.010*\"fresh\" + 0.009*\"crab\" + 0.009*\"heat\" + 0.009*\"seafood\" + 0.009*\"dish\"'),\n"," (7,\n","  '0.013*\"one\" + 0.012*\"like\" + 0.011*\"recipe\" + 0.009*\"good\" + 0.008*\"make\" + 0.007*\"way\" + 0.007*\"even\" + 0.006*\"much\" + 0.006*\"also\" + 0.006*\"something\" + 0.006*\"time\" + 0.006*\"thing\" + 0.006*\"little\" + 0.005*\"made\" + 0.005*\"day\"'),\n"," (8,\n","  '0.028*\"minute\" + 0.020*\"olive_oil\" + 0.016*\"oil\" + 0.016*\"pepper\" + 0.015*\"cook\" + 0.013*\"pan\" + 0.012*\"serf\" + 0.011*\"onion\" + 0.011*\"chopped\" + 0.010*\"heat\" + 0.010*\"potato\" + 0.010*\"cheese\" + 0.010*\"top\" + 0.010*\"butter\" + 0.008*\"large\"'),\n"," (9,\n","  '0.073*\"potato\" + 0.073*\"fish\" + 0.019*\"mayonnaise\" + 0.019*\"salmon\" + 0.014*\"fillet\" + 0.013*\"mustard\" + 0.012*\"mackerel\" + 0.010*\"sandwich\" + 0.010*\"butter\" + 0.010*\"creme_fraiche\" + 0.009*\"salt\" + 0.009*\"dill\" + 0.009*\"skin\" + 0.009*\"oil\" + 0.008*\"make\"'),\n"," (10,\n","  '0.014*\"little\" + 0.014*\"pan\" + 0.012*\"butter\" + 0.011*\"place\" + 0.011*\"warm\" + 0.011*\"cook\" + 0.011*\"minute\" + 0.010*\"slice\" + 0.010*\"peel\" + 0.009*\"onion\" + 0.009*\"lightly\" + 0.008*\"large\" + 0.008*\"remove\" + 0.008*\"small\" + 0.008*\"stir\"'),\n"," (11,\n","  '0.019*\"onion\" + 0.019*\"cook\" + 0.017*\"soup\" + 0.017*\"minute\" + 0.015*\"chopped\" + 0.014*\"oil\" + 0.013*\"bean\" + 0.013*\"water\" + 0.012*\"chilli\" + 0.011*\"stir\" + 0.010*\"garlic\" + 0.010*\"tomato\" + 0.010*\"heat\" + 0.009*\"pan\" + 0.009*\"lentil\"'),\n"," (12,\n","  '0.059*\"apple\" + 0.051*\"fruit\" + 0.033*\"rhubarb\" + 0.030*\"sugar\" + 0.028*\"pear\" + 0.019*\"plum\" + 0.016*\"peach\" + 0.012*\"juice\" + 0.012*\"fig\" + 0.011*\"jam\" + 0.010*\"quince\" + 0.009*\"blackberry\" + 0.009*\"crumble\" + 0.008*\"sweet\" + 0.008*\"put\"'),\n"," (13,\n","  '0.040*\"tomato\" + 0.037*\"pasta\" + 0.021*\"olive_oil\" + 0.016*\"sauce\" + 0.014*\"courgette\" + 0.011*\"cook\" + 0.010*\"pan\" + 0.010*\"garlic\" + 0.010*\"water\" + 0.010*\"cheese\" + 0.009*\"aubergine\" + 0.009*\"dish\" + 0.008*\"like\" + 0.008*\"basil\" + 0.008*\"cooking\"'),\n"," (14,\n","  '0.027*\"meat\" + 0.013*\"pan\" + 0.013*\"onion\" + 0.013*\"minute\" + 0.012*\"cook\" + 0.012*\"lamb\" + 0.011*\"oven\" + 0.010*\"pork\" + 0.009*\"stock\" + 0.009*\"hour\" + 0.008*\"fat\" + 0.008*\"potato\" + 0.008*\"roast\" + 0.008*\"butter\" + 0.008*\"put\"'),\n"," (15,\n","  '0.015*\"food\" + 0.014*\"would\" + 0.010*\"one\" + 0.009*\"home\" + 0.009*\"make\" + 0.008*\"family\" + 0.008*\"time\" + 0.008*\"cook\" + 0.008*\"day\" + 0.008*\"like\" + 0.008*\"always\" + 0.007*\"cooking\" + 0.007*\"book\" + 0.007*\"eat\" + 0.007*\"kitchen\"'),\n"," (16,\n","  '0.021*\"make\" + 0.018*\"steak\" + 0.014*\"barbecue\" + 0.014*\"use\" + 0.013*\"get\" + 0.013*\"time\" + 0.010*\"need\" + 0.010*\"take\" + 0.010*\"food\" + 0.009*\"one\" + 0.009*\"fridge\" + 0.009*\"jar\" + 0.008*\"meat\" + 0.008*\"good\" + 0.008*\"cook\"'),\n"," (17,\n","  '0.034*\"drink\" + 0.021*\"wine\" + 0.016*\"cocktail\" + 0.015*\"garnish\" + 0.015*\"glass\" + 0.014*\"one\" + 0.012*\"gin\" + 0.010*\"make\" + 0.009*\"bottle\" + 0.009*\"use\" + 0.008*\"top\" + 0.008*\"ice\" + 0.008*\"ingredient\" + 0.008*\"sherry\" + 0.007*\"vodka\"'),\n"," (18,\n","  '0.146*\"rice\" + 0.045*\"cauliflower\" + 0.027*\"polenta\" + 0.025*\"leek\" + 0.022*\"minute\" + 0.019*\"cook\" + 0.017*\"pan\" + 0.016*\"stir\" + 0.016*\"sprout\" + 0.016*\"cooked\" + 0.015*\"water\" + 0.015*\"stock\" + 0.014*\"risotto\" + 0.014*\"butter\" + 0.011*\"dal\"'),\n"," (19,\n","  '0.040*\"coconut\" + 0.025*\"spice\" + 0.022*\"ginger\" + 0.016*\"cup\" + 0.015*\"salt\" + 0.015*\"curry\" + 0.011*\"coconut_milk\" + 0.011*\"clove\" + 0.010*\"turmeric\" + 0.010*\"paste\" + 0.009*\"minute\" + 0.009*\"heat\" + 0.009*\"corn\" + 0.009*\"mustard_seed\" + 0.009*\"oil\"'),\n"," (20,\n","  '0.038*\"chicken\" + 0.018*\"sauce\" + 0.016*\"minute\" + 0.014*\"water\" + 0.013*\"spring_onion\" + 0.013*\"oil\" + 0.012*\"rice\" + 0.011*\"chilli\" + 0.011*\"noodle\" + 0.010*\"soy_sauce\" + 0.009*\"bowl\" + 0.009*\"cook\" + 0.009*\"ginger\" + 0.009*\"pan\" + 0.009*\"heat\"'),\n"," (21,\n","  '0.026*\"cake\" + 0.020*\"sugar\" + 0.015*\"chocolate\" + 0.014*\"butter\" + 0.012*\"egg\" + 0.011*\"mixture\" + 0.011*\"make\" + 0.010*\"tin\" + 0.009*\"minute\" + 0.009*\"cream\" + 0.009*\"mix\" + 0.008*\"top\" + 0.008*\"caster_sugar\" + 0.008*\"bowl\" + 0.007*\"put\"'),\n"," (22,\n","  '0.033*\"salad\" + 0.021*\"dressing\" + 0.018*\"leaf\" + 0.016*\"olive_oil\" + 0.011*\"beetroot\" + 0.010*\"lemon\" + 0.009*\"bowl\" + 0.009*\"vinegar\" + 0.009*\"vegetable\" + 0.008*\"green\" + 0.008*\"little\" + 0.008*\"small\" + 0.008*\"herb\" + 0.007*\"oil\" + 0.007*\"cut\"'),\n"," (23,\n","  '0.021*\"recipe\" + 0.013*\"like\" + 0.012*\"make\" + 0.011*\"flavour\" + 0.011*\"though\" + 0.010*\"use\" + 0.009*\"version\" + 0.008*\"also\" + 0.008*\"rather\" + 0.008*\"dish\" + 0.008*\"give\" + 0.007*\"one\" + 0.007*\"however\" + 0.007*\"perfect\" + 0.007*\"although\"')]"]},"metadata":{"tags":[]},"execution_count":70}]},{"cell_type":"code","metadata":{"id":"bl8JVos8U7Fx","colab_type":"code","colab":{}},"source":["def format_topics_sentences(ldamodel=ldamodel, corpus=corpus, texts=text_data):\n","    # Array of top 10 topics\n","    top10array = []\n"," \n","    for row in range(ldamodel.num_topics):\n","        wp = ldamodel.show_topic(row)\n","        topic_keywords = \", \".join([word for word, prop in wp])\n","        top10array.append((row+1, topic_keywords))\n"," \n","    top10dict = dict(top10array)\n"," \n","    sent_topics_df = pd.DataFrame(pd.DataFrame([sorted(topic[0], key=lambda x: (x[1]), reverse=True) for topic in ldamodel[corpus]])[0])\n","    sent_topics_df.columns=[\"Data\"]\n","    sent_topics_df['Dominant_Topic'] = sent_topics_df.Data.apply(lambda x: x[0]+1)\n","    sent_topics_df['Perc_Contribution'] = sent_topics_df.Data.apply(lambda x: round(x[1],4))\n","    sent_topics_df['Topic_Keywords'] = sent_topics_df.Dominant_Topic.apply(lambda x: top10dict[x])\n"," \n","    # Add original text to the end of the output\n","    contents = pd.Series(texts)\n","    sent_topics_df = pd.concat([sent_topics_df, contents.rename(\"Text\")], axis=1)\n","    sent_topics_df = sent_topics_df[['Dominant_Topic', 'Perc_Contribution','Topic_Keywords', 'Text']]\n","    return(sent_topics_df)\n"," \n","df_topic_sents_keywords = format_topics_sentences()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jEBKVVU3Xth6","colab_type":"code","outputId":"de0ce4e8-9749-4fb0-cd13-346e4beda346","executionInfo":{"status":"ok","timestamp":1573917269019,"user_tz":0,"elapsed":514,"user":{"displayName":"Aude Vuilli","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBvb7DVNjMBgsPLogqP6L69Z5SUiqMzjmazn2aI=s64","userId":"08053235329720588301"}},"colab":{"base_uri":"https://localhost:8080/","height":174}},"source":["df_topic_sents_keywords.head(2)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Dominant_Topic</th>\n","      <th>Perc_Contribution</th>\n","      <th>Topic_Keywords</th>\n","      <th>Text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>12</td>\n","      <td>0.1704</td>\n","      <td>onion, cook, soup, minute, chopped, oil, bean, water, chilli, stir</td>\n","      <td>[familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>10</td>\n","      <td>0.3463</td>\n","      <td>potato, fish, mayonnaise, salmon, fillet, mustard, mackerel, sandwich, butte...</td>\n","      <td>[sandwich_fillings, cheese, tomato, apple_slaw, mix, mayonnaise, lemon_juice...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Dominant_Topic  Perc_Contribution  \\\n","0              12             0.1704   \n","1              10             0.3463   \n","\n","                                                                    Topic_Keywords  \\\n","0               onion, cook, soup, minute, chopped, oil, bean, water, chilli, stir   \n","1  potato, fish, mayonnaise, salmon, fillet, mustard, mackerel, sandwich, butte...   \n","\n","                                                                              Text  \n","0  [familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...  \n","1  [sandwich_fillings, cheese, tomato, apple_slaw, mix, mayonnaise, lemon_juice...  "]},"metadata":{"tags":[]},"execution_count":73}]},{"cell_type":"code","metadata":{"id":"rdTHWk_VXLED","colab_type":"code","colab":{}},"source":["## Merge data with topic dataframe\n","data_merge_ldagensim = pd.merge(data,df_topic_sents_keywords,left_index=True,right_index=True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"X3n2rjNFYJqH","colab_type":"code","outputId":"2defdcf3-98b4-44e0-fa38-37618a339071","executionInfo":{"status":"ok","timestamp":1573917308992,"user_tz":0,"elapsed":454,"user":{"displayName":"Aude Vuilli","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBvb7DVNjMBgsPLogqP6L69Z5SUiqMzjmazn2aI=s64","userId":"08053235329720588301"}},"colab":{"base_uri":"https://localhost:8080/","height":281}},"source":["#data_merge_ldagensim['Dominant_Topic'] = data_merge_ldagensim['Dominant_Topic']-1\n","data_merge_ldagensim.head(1)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>headline_list</th>\n","      <th>category</th>\n","      <th>author</th>\n","      <th>subtitle</th>\n","      <th>article_content</th>\n","      <th>url</th>\n","      <th>allcontent</th>\n","      <th>allcontent_clean</th>\n","      <th>allcontent_token</th>\n","      <th>allcontent_noStopWords</th>\n","      <th>allcontent_token_nostops</th>\n","      <th>allcontent_lemmatized</th>\n","      <th>bigrams</th>\n","      <th>trigrams</th>\n","      <th>bigrams_lem</th>\n","      <th>trigrams_lem</th>\n","      <th>Dominant_Topic</th>\n","      <th>Perc_Contribution</th>\n","      <th>Topic_Keywords</th>\n","      <th>Text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>18/10/2008</td>\n","      <td>Good fast food</td>\n","      <td>Cooking for kids</td>\n","      <td>none</td>\n","      <td>It's that familiar scene: hardly any food in the house but a gaggle of hungr...</td>\n","      <td>Stringy stretchy omelettes\\nEggs are obviously sent from heaven for tired pa...</td>\n","      <td>https://www.theguardian.com/lifeandstyle/2008/oct/18/healthy-fast-food</td>\n","      <td>It's that familiar scene: hardly any food in the house but a gaggle of hungr...</td>\n","      <td>its that familiar scene hardly any food in the house but a gaggle of hungry ...</td>\n","      <td>[its, that, familiar, scene, hardly, any, food, in, the, house, but, a, gagg...</td>\n","      <td>familiar scene hardly food house gaggle hungry children feed simple solution...</td>\n","      <td>[familiar, scene, hardly, food, house, gaggle, hungry, children, feed, simpl...</td>\n","      <td>[familiar, scene, hardly, food, house, gaggle, hungry, child, feed, simple, ...</td>\n","      <td>[familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...</td>\n","      <td>[familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...</td>\n","      <td>[familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...</td>\n","      <td>[familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...</td>\n","      <td>11</td>\n","      <td>0.1704</td>\n","      <td>onion, cook, soup, minute, chopped, oil, bean, water, chilli, stir</td>\n","      <td>[familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         date   headline_list          category author  \\\n","0  18/10/2008  Good fast food  Cooking for kids   none   \n","\n","                                                                          subtitle  \\\n","0  It's that familiar scene: hardly any food in the house but a gaggle of hungr...   \n","\n","                                                                   article_content  \\\n","0  Stringy stretchy omelettes\\nEggs are obviously sent from heaven for tired pa...   \n","\n","                                                                      url  \\\n","0  https://www.theguardian.com/lifeandstyle/2008/oct/18/healthy-fast-food   \n","\n","                                                                        allcontent  \\\n","0  It's that familiar scene: hardly any food in the house but a gaggle of hungr...   \n","\n","                                                                  allcontent_clean  \\\n","0  its that familiar scene hardly any food in the house but a gaggle of hungry ...   \n","\n","                                                                  allcontent_token  \\\n","0  [its, that, familiar, scene, hardly, any, food, in, the, house, but, a, gagg...   \n","\n","                                                            allcontent_noStopWords  \\\n","0  familiar scene hardly food house gaggle hungry children feed simple solution...   \n","\n","                                                          allcontent_token_nostops  \\\n","0  [familiar, scene, hardly, food, house, gaggle, hungry, children, feed, simpl...   \n","\n","                                                             allcontent_lemmatized  \\\n","0  [familiar, scene, hardly, food, house, gaggle, hungry, child, feed, simple, ...   \n","\n","                                                                           bigrams  \\\n","0  [familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...   \n","\n","                                                                          trigrams  \\\n","0  [familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...   \n","\n","                                                                       bigrams_lem  \\\n","0  [familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...   \n","\n","                                                                      trigrams_lem  \\\n","0  [familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...   \n","\n","   Dominant_Topic  Perc_Contribution  \\\n","0              11             0.1704   \n","\n","                                                       Topic_Keywords  \\\n","0  onion, cook, soup, minute, chopped, oil, bean, water, chilli, stir   \n","\n","                                                                              Text  \n","0  [familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...  "]},"metadata":{"tags":[]},"execution_count":75}]},{"cell_type":"code","metadata":{"id":"fpTrDlcInPgC","colab_type":"code","colab":{}},"source":["# Append name of topic to each topic number\n","ldagensim_topic = []\n","for i in data_merge_ldagensim['Dominant_Topic']:\n","   if i == 0:\n","       ldagensim_topic.append('Breads & Doughs')\n","   elif i == 1:\n","       ldagensim_topic.append('Eggs & Omelettes')\n","   elif i == 2:\n","       ldagensim_topic.append('other')\n","   elif i == 3:\n","       ldagensim_topic.append('Breakfast')\n","   elif i == 4:\n","       ldagensim_topic.append('Fruits - Juices')\n","   elif i == 5:\n","       ldagensim_topic.append('Pie, Pastry & Tart')\n","   elif i == 6:\n","       ldagensim_topic.append('Fish & Seafood')\n","   elif i == 7:\n","       ldagensim_topic.append('other')\n","   elif i == 8:\n","       ldagensim_topic.append('Mains')\n","   elif i == 9:  \n","       ldagensim_topic.append('Sandwich & Toasts')\n","   elif i == 10:\n","       ldagensim_topic.append('other')     \n","   elif i == 11:\n","       ldagensim_topic.append('Soups')\n","   elif i == 12:\n","       ldagensim_topic.append('Fruits - Desserts')\n","   elif i == 13:\n","       ldagensim_topic.append('Pasta - Italian Recipes')\n","   elif i == 14:\n","       ldagensim_topic.append('Meat')\n","   elif i == 15:\n","       ldagensim_topic.append('Family - Home Cooking')\n","   elif i == 16:\n","       ldagensim_topic.append('Barbecue')\n","   elif i == 17:\n","       ldagensim_topic.append('Drinks & Cocktails')\n","   elif i == 18:\n","       ldagensim_topic.append('Rice, Lentils - Risotto, Dahl')\n","   elif i == 19:\n","        ldagensim_topic.append('Curry')\n","   elif i == 20:\n","       ldagensim_topic.append('Asian Style')\n","   elif i == 21:\n","       ldagensim_topic.append('Cakes')\n","   elif i == 22:\n","       ldagensim_topic.append('Salads')\n","   elif i == 23:\n","        ldagensim_topic.append('other')\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"tEO8mj8z4ohI","colab_type":"code","colab":{}},"source":["data_merge_ldagensim['LDAGensim_Topic'] = ldagensim_topic"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"AFI2C5ZL4mUw","colab_type":"code","outputId":"26556019-ade4-4d5e-8a14-69d2f253667b","executionInfo":{"status":"ok","timestamp":1573919066509,"user_tz":0,"elapsed":499,"user":{"displayName":"Aude Vuilli","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBvb7DVNjMBgsPLogqP6L69Z5SUiqMzjmazn2aI=s64","userId":"08053235329720588301"}},"colab":{"base_uri":"https://localhost:8080/","height":394}},"source":["data_merge_ldagensim.head(2)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>headline_list</th>\n","      <th>category</th>\n","      <th>author</th>\n","      <th>subtitle</th>\n","      <th>article_content</th>\n","      <th>url</th>\n","      <th>allcontent</th>\n","      <th>allcontent_clean</th>\n","      <th>allcontent_token</th>\n","      <th>allcontent_noStopWords</th>\n","      <th>allcontent_token_nostops</th>\n","      <th>allcontent_lemmatized</th>\n","      <th>bigrams</th>\n","      <th>trigrams</th>\n","      <th>bigrams_lem</th>\n","      <th>trigrams_lem</th>\n","      <th>Dominant_Topic</th>\n","      <th>Perc_Contribution</th>\n","      <th>Topic_Keywords</th>\n","      <th>Text</th>\n","      <th>LDAGensim_Topic</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>18/10/2008</td>\n","      <td>Good fast food</td>\n","      <td>Cooking for kids</td>\n","      <td>none</td>\n","      <td>It's that familiar scene: hardly any food in the house but a gaggle of hungr...</td>\n","      <td>Stringy stretchy omelettes\\nEggs are obviously sent from heaven for tired pa...</td>\n","      <td>https://www.theguardian.com/lifeandstyle/2008/oct/18/healthy-fast-food</td>\n","      <td>It's that familiar scene: hardly any food in the house but a gaggle of hungr...</td>\n","      <td>its that familiar scene hardly any food in the house but a gaggle of hungry ...</td>\n","      <td>[its, that, familiar, scene, hardly, any, food, in, the, house, but, a, gagg...</td>\n","      <td>familiar scene hardly food house gaggle hungry children feed simple solution...</td>\n","      <td>[familiar, scene, hardly, food, house, gaggle, hungry, children, feed, simpl...</td>\n","      <td>[familiar, scene, hardly, food, house, gaggle, hungry, child, feed, simple, ...</td>\n","      <td>[familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...</td>\n","      <td>[familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...</td>\n","      <td>[familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...</td>\n","      <td>[familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...</td>\n","      <td>11</td>\n","      <td>0.1704</td>\n","      <td>onion, cook, soup, minute, chopped, oil, bean, water, chilli, stir</td>\n","      <td>[familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...</td>\n","      <td>Soups</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>18/10/2008</td>\n","      <td>Top 10</td>\n","      <td>Cooking for kids</td>\n","      <td>none</td>\n","      <td>Sandwich fillings</td>\n","      <td>1 Cheese and tomato\\n2 Apple slaw: mix mayonnaise, lemon juice, grated chees...</td>\n","      <td>https://www.theguardian.com/lifeandstyle/2008/oct/18/sandwich-fillings-for-kids</td>\n","      <td>Sandwich fillings 1 Cheese and tomato\\n2 Apple slaw: mix mayonnaise, lemon j...</td>\n","      <td>sandwich fillings cheese and tomato apple slaw mix mayonnaise lemon juice gr...</td>\n","      <td>[sandwich, fillings, cheese, and, tomato, apple, slaw, mix, mayonnaise, lemo...</td>\n","      <td>sandwich fillings cheese tomato apple slaw mix mayonnaise lemon juice grated...</td>\n","      <td>[sandwich, fillings, cheese, tomato, apple, slaw, mix, mayonnaise, lemon, ju...</td>\n","      <td>[sandwich, filling, cheese, tomato, apple, slaw, mix, mayonnaise, lemon, jui...</td>\n","      <td>[sandwich_fillings, cheese, tomato, apple_slaw, mix, mayonnaise, lemon_juice...</td>\n","      <td>[sandwich_fillings, cheese, tomato, apple_slaw, mix, mayonnaise, lemon_juice...</td>\n","      <td>[sandwich_fillings, cheese, tomato, apple_slaw, mix, mayonnaise, lemon_juice...</td>\n","      <td>[sandwich_fillings, cheese, tomato, apple_slaw, mix, mayonnaise, lemon_juice...</td>\n","      <td>9</td>\n","      <td>0.3463</td>\n","      <td>potato, fish, mayonnaise, salmon, fillet, mustard, mackerel, sandwich, butte...</td>\n","      <td>[sandwich_fillings, cheese, tomato, apple_slaw, mix, mayonnaise, lemon_juice...</td>\n","      <td>Sandwich &amp; Toasts</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         date   headline_list          category author  \\\n","0  18/10/2008  Good fast food  Cooking for kids   none   \n","1  18/10/2008          Top 10  Cooking for kids   none   \n","\n","                                                                          subtitle  \\\n","0  It's that familiar scene: hardly any food in the house but a gaggle of hungr...   \n","1                                                                Sandwich fillings   \n","\n","                                                                   article_content  \\\n","0  Stringy stretchy omelettes\\nEggs are obviously sent from heaven for tired pa...   \n","1  1 Cheese and tomato\\n2 Apple slaw: mix mayonnaise, lemon juice, grated chees...   \n","\n","                                                                               url  \\\n","0           https://www.theguardian.com/lifeandstyle/2008/oct/18/healthy-fast-food   \n","1  https://www.theguardian.com/lifeandstyle/2008/oct/18/sandwich-fillings-for-kids   \n","\n","                                                                        allcontent  \\\n","0  It's that familiar scene: hardly any food in the house but a gaggle of hungr...   \n","1  Sandwich fillings 1 Cheese and tomato\\n2 Apple slaw: mix mayonnaise, lemon j...   \n","\n","                                                                  allcontent_clean  \\\n","0  its that familiar scene hardly any food in the house but a gaggle of hungry ...   \n","1  sandwich fillings cheese and tomato apple slaw mix mayonnaise lemon juice gr...   \n","\n","                                                                  allcontent_token  \\\n","0  [its, that, familiar, scene, hardly, any, food, in, the, house, but, a, gagg...   \n","1  [sandwich, fillings, cheese, and, tomato, apple, slaw, mix, mayonnaise, lemo...   \n","\n","                                                            allcontent_noStopWords  \\\n","0  familiar scene hardly food house gaggle hungry children feed simple solution...   \n","1  sandwich fillings cheese tomato apple slaw mix mayonnaise lemon juice grated...   \n","\n","                                                          allcontent_token_nostops  \\\n","0  [familiar, scene, hardly, food, house, gaggle, hungry, children, feed, simpl...   \n","1  [sandwich, fillings, cheese, tomato, apple, slaw, mix, mayonnaise, lemon, ju...   \n","\n","                                                             allcontent_lemmatized  \\\n","0  [familiar, scene, hardly, food, house, gaggle, hungry, child, feed, simple, ...   \n","1  [sandwich, filling, cheese, tomato, apple, slaw, mix, mayonnaise, lemon, jui...   \n","\n","                                                                           bigrams  \\\n","0  [familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...   \n","1  [sandwich_fillings, cheese, tomato, apple_slaw, mix, mayonnaise, lemon_juice...   \n","\n","                                                                          trigrams  \\\n","0  [familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...   \n","1  [sandwich_fillings, cheese, tomato, apple_slaw, mix, mayonnaise, lemon_juice...   \n","\n","                                                                       bigrams_lem  \\\n","0  [familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...   \n","1  [sandwich_fillings, cheese, tomato, apple_slaw, mix, mayonnaise, lemon_juice...   \n","\n","                                                                      trigrams_lem  \\\n","0  [familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...   \n","1  [sandwich_fillings, cheese, tomato, apple_slaw, mix, mayonnaise, lemon_juice...   \n","\n","   Dominant_Topic  Perc_Contribution  \\\n","0              11             0.1704   \n","1               9             0.3463   \n","\n","                                                                    Topic_Keywords  \\\n","0               onion, cook, soup, minute, chopped, oil, bean, water, chilli, stir   \n","1  potato, fish, mayonnaise, salmon, fillet, mustard, mackerel, sandwich, butte...   \n","\n","                                                                              Text  \\\n","0  [familiar, scene, hardly, food, house, gaggle, hungry_children, feed, simple...   \n","1  [sandwich_fillings, cheese, tomato, apple_slaw, mix, mayonnaise, lemon_juice...   \n","\n","     LDAGensim_Topic  \n","0              Soups  \n","1  Sandwich & Toasts  "]},"metadata":{"tags":[]},"execution_count":91}]},{"cell_type":"code","metadata":{"id":"SzsrjqUubGCS","colab_type":"code","colab":{}},"source":["data_merge_ldagensim.to_csv('drive/My Drive/Personal Projects/2019/Guardian/data/ldagensim_topics.csv')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"q32PSdJBXOI8","colab_type":"text"},"source":["### Topic Visualization"]},{"cell_type":"code","metadata":{"id":"buuoJLKLqNdZ","colab_type":"code","colab":{}},"source":["!pip install pyLDAvis"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ESKyVGCgYotE","colab_type":"code","colab":{}},"source":["import pyLDAvis\n","import pyLDAvis.gensim\n","\n","# Visualize the topics\n","pyLDAvis.enable_notebook()\n","vis = pyLDAvis.gensim.prepare(ldamodel, corpus, id2word)\n","vis"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"KdpylmtSUcAF"},"source":["### LDA Mallet Topic Model\n","\n","- Create txt files for each documents\n","- LDA Topic Modelling using Mallet \n","- Run via the terminal, save output and open files in google colab"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"9cOShdsBUcAI","colab":{}},"source":["## Save single blogposts into a text file - Use in LDA Mallet\n","## Save Lemmatized \n","for i in range(len(data['bigrams_lem'])):\n","  with open('drive/My Drive/Personal Projects/2019/Guardian/mallet-2.0.8/data/articles/'+str(i)+'.txt', 'w') as f:\n","    for item in data['bigrams_lem'][i]:\n","      f.write(\"%s\\n\" % item)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"izRUiwdJUbFu","colab_type":"text"},"source":["#### Mallet Topic Definition\n","\n","- Select the three most important topic for each document\n","- Classify each of the 16 mallet topics into one of the categories \n"," 1. Asian Cuisine  \n"," 2. Pasta Dishes \n"," 3. Drinks & Cocktails\n"," 4. Meat Dishes\n"," 5. Cake & Tea Time Treats\n"," 6. Pie, Pastry & Rolls\n"," 7. Salads\n"," 8. Fruit Dessert & Puddings \n","- Append the 3 most important topic to each document\n","- Check the document for which 1st topic relevance is below 20%"]},{"cell_type":"code","metadata":{"id":"S_M9jt3jjPmn","colab_type":"code","outputId":"ca6fa785-e367-4580-b578-9ac59c2fb403","executionInfo":{"status":"ok","timestamp":1574291964970,"user_tz":0,"elapsed":1999,"user":{"displayName":"Aude Vuilli","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBvb7DVNjMBgsPLogqP6L69Z5SUiqMzjmazn2aI=s64","userId":"08053235329720588301"}},"colab":{"base_uri":"https://localhost:8080/","height":127}},"source":["# read topic modelling with LDA Mallet \n","mallet_df = pd.read_csv('drive/My Drive/Personal Projects/2019/Guardian/data/mallet/bigram_topics.csv')\n","\n","#clean topic modelling blogpostnumber\n","mallet_df['article'] = mallet_df['article'].str.replace(r'file:/Users/audevuilliomenet/avuilli%20-%20G.Drive/Colab%20Notebooks/mallet-2.0.8/data/guardian_bigram/','')\n","mallet_df['article'] = mallet_df['article'].str.replace(r'.txt','')\n","mallet_df.head(2)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>article</th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>10</th>\n","      <th>11</th>\n","      <th>12</th>\n","      <th>13</th>\n","      <th>14</th>\n","      <th>15</th>\n","      <th>16</th>\n","      <th>17</th>\n","      <th>18</th>\n","      <th>19</th>\n","      <th>20</th>\n","      <th>21</th>\n","      <th>22</th>\n","      <th>23</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3644</td>\n","      <td>0.084305</td>\n","      <td>0.000426</td>\n","      <td>0.016334</td>\n","      <td>0.000573</td>\n","      <td>0.186541</td>\n","      <td>0.237359</td>\n","      <td>0.000975</td>\n","      <td>0.168001</td>\n","      <td>0.000428</td>\n","      <td>0.001036</td>\n","      <td>0.023932</td>\n","      <td>0.000699</td>\n","      <td>0.001029</td>\n","      <td>0.001035</td>\n","      <td>0.002071</td>\n","      <td>0.236298</td>\n","      <td>0.001926</td>\n","      <td>0.000589</td>\n","      <td>0.001048</td>\n","      <td>0.008269</td>\n","      <td>0.000480</td>\n","      <td>0.016227</td>\n","      <td>0.001285</td>\n","      <td>0.009131</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5235</td>\n","      <td>0.001534</td>\n","      <td>0.800631</td>\n","      <td>0.002578</td>\n","      <td>0.001309</td>\n","      <td>0.009297</td>\n","      <td>0.038567</td>\n","      <td>0.002230</td>\n","      <td>0.001675</td>\n","      <td>0.000978</td>\n","      <td>0.002370</td>\n","      <td>0.019950</td>\n","      <td>0.001597</td>\n","      <td>0.002353</td>\n","      <td>0.002367</td>\n","      <td>0.022120</td>\n","      <td>0.070910</td>\n","      <td>0.004404</td>\n","      <td>0.001346</td>\n","      <td>0.002395</td>\n","      <td>0.001523</td>\n","      <td>0.001098</td>\n","      <td>0.002334</td>\n","      <td>0.002939</td>\n","      <td>0.003493</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  article         0         1         2         3         4         5  \\\n","0    3644  0.084305  0.000426  0.016334  0.000573  0.186541  0.237359   \n","1    5235  0.001534  0.800631  0.002578  0.001309  0.009297  0.038567   \n","\n","          6         7         8         9        10        11        12  \\\n","0  0.000975  0.168001  0.000428  0.001036  0.023932  0.000699  0.001029   \n","1  0.002230  0.001675  0.000978  0.002370  0.019950  0.001597  0.002353   \n","\n","         13        14        15        16        17        18        19  \\\n","0  0.001035  0.002071  0.236298  0.001926  0.000589  0.001048  0.008269   \n","1  0.002367  0.022120  0.070910  0.004404  0.001346  0.002395  0.001523   \n","\n","         20        21        22        23  \n","0  0.000480  0.016227  0.001285  0.009131  \n","1  0.001098  0.002334  0.002939  0.003493  "]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"YwU5Dh5jkY-V","colab_type":"code","outputId":"257dd45b-0980-403c-c006-e594d6662a83","executionInfo":{"status":"ok","timestamp":1574291966551,"user_tz":0,"elapsed":577,"user":{"displayName":"Aude Vuilli","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBvb7DVNjMBgsPLogqP6L69Z5SUiqMzjmazn2aI=s64","userId":"08053235329720588301"}},"colab":{"base_uri":"https://localhost:8080/","height":127}},"source":["# sort values by blogpost \n","mallet_df['article'] = mallet_df['article'].astype(int)\n","mallet_df = mallet_df.sort_values(['article']).reset_index(drop=True)\n","mallet_df.head(2)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>article</th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>10</th>\n","      <th>11</th>\n","      <th>12</th>\n","      <th>13</th>\n","      <th>14</th>\n","      <th>15</th>\n","      <th>16</th>\n","      <th>17</th>\n","      <th>18</th>\n","      <th>19</th>\n","      <th>20</th>\n","      <th>21</th>\n","      <th>22</th>\n","      <th>23</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0.007263</td>\n","      <td>0.00008</td>\n","      <td>0.001639</td>\n","      <td>0.000108</td>\n","      <td>0.120674</td>\n","      <td>0.093100</td>\n","      <td>0.010176</td>\n","      <td>0.007275</td>\n","      <td>0.032913</td>\n","      <td>0.021607</td>\n","      <td>0.000211</td>\n","      <td>0.028681</td>\n","      <td>0.198616</td>\n","      <td>0.020179</td>\n","      <td>0.240209</td>\n","      <td>0.067205</td>\n","      <td>0.001789</td>\n","      <td>0.028661</td>\n","      <td>0.000197</td>\n","      <td>0.054370</td>\n","      <td>0.000090</td>\n","      <td>0.021604</td>\n","      <td>0.013089</td>\n","      <td>0.030264</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>0.149148</td>\n","      <td>0.00118</td>\n","      <td>0.003121</td>\n","      <td>0.001585</td>\n","      <td>0.011253</td>\n","      <td>0.215016</td>\n","      <td>0.002699</td>\n","      <td>0.065152</td>\n","      <td>0.001184</td>\n","      <td>0.002869</td>\n","      <td>0.024148</td>\n","      <td>0.317558</td>\n","      <td>0.002848</td>\n","      <td>0.087032</td>\n","      <td>0.026774</td>\n","      <td>0.001663</td>\n","      <td>0.005331</td>\n","      <td>0.001630</td>\n","      <td>0.002899</td>\n","      <td>0.001844</td>\n","      <td>0.043412</td>\n","      <td>0.002825</td>\n","      <td>0.024599</td>\n","      <td>0.004229</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   article         0        1         2         3         4         5  \\\n","0        0  0.007263  0.00008  0.001639  0.000108  0.120674  0.093100   \n","1        1  0.149148  0.00118  0.003121  0.001585  0.011253  0.215016   \n","\n","          6         7         8         9        10        11        12  \\\n","0  0.010176  0.007275  0.032913  0.021607  0.000211  0.028681  0.198616   \n","1  0.002699  0.065152  0.001184  0.002869  0.024148  0.317558  0.002848   \n","\n","         13        14        15        16        17        18        19  \\\n","0  0.020179  0.240209  0.067205  0.001789  0.028661  0.000197  0.054370   \n","1  0.087032  0.026774  0.001663  0.005331  0.001630  0.002899  0.001844   \n","\n","         20        21        22        23  \n","0  0.000090  0.021604  0.013089  0.030264  \n","1  0.043412  0.002825  0.024599  0.004229  "]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"bt-ncYGqknid","colab_type":"code","colab":{}},"source":["#select only the values\n","malet_values = mallet_df.drop(columns={'article'})"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wbutp_Q-kp6O","colab_type":"code","outputId":"f054c5e0-0284-4e9c-82c3-7f5cbe9b5315","executionInfo":{"status":"ok","timestamp":1574291973407,"user_tz":0,"elapsed":3235,"user":{"displayName":"Aude Vuilli","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBvb7DVNjMBgsPLogqP6L69Z5SUiqMzjmazn2aI=s64","userId":"08053235329720588301"}},"colab":{"base_uri":"https://localhost:8080/","height":197}},"source":["## Sort the dataframe by the relevance of topics\n","ranked_mallet = malet_values.apply(np.argsort, axis=1)\n","ranked_mallet = pd.DataFrame(ranked_mallet.values[:,::-1][:,::1])\n","\n","# get the values of the most import topic\n","values_mallet = pd.DataFrame(np.sort(malet_values.values)[:,-3:], columns=['topic_3_mallet_perc','topic_2_mallet_perc','topic_1_mallet_perc'])\n","values_mallet.head(2)\n","\n","## Join Both dataframe\n","# new_Frame columns 0,1,2 and mallet dataframe!\n","ranked_mallet_selec = ranked_mallet[[0,1,2]]\n","mallet_result = pd.concat([ranked_mallet_selec,values_mallet],axis=1,join='inner')\n","\n","# reogranize the dataframe\n","mallet_topics_df = mallet_result[[0,'topic_1_mallet_perc',1,'topic_2_mallet_perc',2,'topic_3_mallet_perc']]\n","mallet_topics_df = mallet_topics_df.rename(columns={0:'topic_1_mallet',1:'topic_2_mallet',2:'topic_3_mallet'})\n","mallet_topics_df.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>topic_1_mallet</th>\n","      <th>topic_1_mallet_perc</th>\n","      <th>topic_2_mallet</th>\n","      <th>topic_2_mallet_perc</th>\n","      <th>topic_3_mallet</th>\n","      <th>topic_3_mallet_perc</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>14</td>\n","      <td>0.240209</td>\n","      <td>12</td>\n","      <td>0.198616</td>\n","      <td>4</td>\n","      <td>0.120674</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>11</td>\n","      <td>0.317558</td>\n","      <td>5</td>\n","      <td>0.215016</td>\n","      <td>0</td>\n","      <td>0.149148</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>23</td>\n","      <td>0.342917</td>\n","      <td>10</td>\n","      <td>0.294266</td>\n","      <td>4</td>\n","      <td>0.212638</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>13</td>\n","      <td>0.423015</td>\n","      <td>0</td>\n","      <td>0.215107</td>\n","      <td>4</td>\n","      <td>0.169762</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>12</td>\n","      <td>0.283553</td>\n","      <td>0</td>\n","      <td>0.219559</td>\n","      <td>4</td>\n","      <td>0.192822</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   topic_1_mallet  topic_1_mallet_perc  topic_2_mallet  topic_2_mallet_perc  \\\n","0              14             0.240209              12             0.198616   \n","1              11             0.317558               5             0.215016   \n","2              23             0.342917              10             0.294266   \n","3              13             0.423015               0             0.215107   \n","4              12             0.283553               0             0.219559   \n","\n","   topic_3_mallet  topic_3_mallet_perc  \n","0               4             0.120674  \n","1               0             0.149148  \n","2               4             0.212638  \n","3               4             0.169762  \n","4               4             0.192822  "]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"zZ9qf-x0kuDZ","colab_type":"text"},"source":["##### Keywords (20) for each topic \n","- Classifiy each topic in one of the 6 categories"]},{"cell_type":"code","metadata":{"id":"B2giqOeuky0Y","colab_type":"code","colab":{}},"source":["# Read file with keywords for each topic (topic number = 16 - topic 0 to 15)\n","mallet_keys = pd.read_csv('drive/My Drive/Personal Projects/2019/Guardian/data/mallet/bigram_keys.csv')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"oi-6OkZ9k6uu","colab_type":"code","outputId":"df382c24-eddc-4689-b5bb-d816ccce93fd","executionInfo":{"status":"ok","timestamp":1574291982916,"user_tz":0,"elapsed":690,"user":{"displayName":"Aude Vuilli","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBvb7DVNjMBgsPLogqP6L69Z5SUiqMzjmazn2aI=s64","userId":"08053235329720588301"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["for i in range(len(mallet_keys)):\n","    print('Topic: ' +str(i))\n","    print('Topic Weight: ' + str(round(mallet_keys.weight[i],3)))\n","    print(mallet_keys.keywords[i])\n","    print(' ')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Topic: 0\n","Topic Weight: 0.088\n","coconut honey make oat squash oil minute banana pumpkin cfgas_mark put nut maple_syrup serf mix recipe chopped seed salt yoghurt \n"," \n","Topic: 1\n","Topic Weight: 0.056\n","drink wine cocktail glass garnish ice syrup sugar gin make top water vodka lemon serf set_information commercial_initiative stir bottle thirdparty_cookies \n"," \n","Topic: 2\n","Topic Weight: 0.148\n","fruit sugar juice apple rhubarb pear syrup orange lemon honey put make peach plum sweet water caster_sugar jam cherry apricot \n"," \n","Topic: 3\n","Topic Weight: 0.075\n","dough flour minute bread salt water make yeast bowl roll bun warm mix leave milk oven loaf place cover put \n"," \n","Topic: 4\n","Topic Weight: 0.535\n","make good time flavour give dont thing bit ingredient day taste recipe find cooking long work hot making eat turn \n"," \n","Topic: 5\n","Topic Weight: 0.219\n","olive_oil tomato pepper oil chopped garlic salad courgette onion aubergine minute garlic_clove bread finely_chopped cook make chilli mix bowl large \n"," \n","Topic: 6\n","Topic Weight: 0.128\n","place slice pan warm small minute peel butter remove large lightly cut put pour leave cook serf piece cgas_mark stir \n"," \n","Topic: 7\n","Topic Weight: 0.096\n","chilli rice sauce spring_onion ginger noodle oil soy_sauce water chicken coriander bowl lime sugar garlic lime_juice heat tofu paste make \n"," \n","Topic: 8\n","Topic Weight: 0.056\n","pasta sauce olive_oil tomato water cheese dish pan cook parmesan italian spaghetti cooking garlic recipe ricotta tomato_sauce anchovy fresh large \n"," \n","Topic: 9\n","Topic Weight: 0.136\n","cream sugar milk chocolate pour custard make mixture caster_sugar whisk bowl water pudding stir set heat egg_yolk double_cream meringue put \n"," \n","Topic: 10\n","Topic Weight: 0.148\n","recipe food book year people ingredient place restaurant chef country egg kate_young british world local found started made produce cook \n"," \n","Topic: 11\n","Topic Weight: 0.092\n","cheese bread christmas slice sandwich bacon top butter ham chestnut turkey sprout make toast leftover cabbage stuffing mustard good blue_cheese \n"," \n","Topic: 12\n","Topic Weight: 0.135\n","egg pan potato oil make batter cook butter flour heat fry hot pancake milk put side mixture frying frying_pan cooked \n"," \n","Topic: 13\n","Topic Weight: 0.136\n","cake sugar butter egg tin mixture flour chocolate mix make biscuit baking_powder stir top minute plain_flour baking caster_sugar icing_sugar beat \n"," \n","Topic: 14\n","Topic Weight: 0.272\n","onion cook minute pan stir stock soup butter heat chopped water large garlic oil potato rice mushroom bean pepper dish \n"," \n","Topic: 15\n","Topic Weight: 0.079\n","rice cook spice onion water curry minute salt chopped ginger oil coconut turmeric coriander chilli heat stir pan mustard_seed paste \n"," \n","Topic: 16\n","Topic Weight: 0.253\n","minute place water salt remove serf pan put large bowl cook slice cut top pour oven small preheat_oven make piece \n"," \n","Topic: 17\n","Topic Weight: 0.077\n","fish mussel salmon fillet prawn crab parsley shell squid cook clam seafood mackerel dish fresh lemon sauce scallop season olive_oil \n"," \n","Topic: 18\n","Topic Weight: 0.138\n","put minute heat salt oil bowl mix small set_aside serves_four medium remaining oven_cfgas pan pepper large half top stir five_minutes \n"," \n","Topic: 19\n","Topic Weight: 0.088\n","pastry filling butter tart pie flour minute egg make top oven bake_minutes apple roll cut dough put egg_yolk mix cream \n"," \n","Topic: 20\n","Topic Weight: 0.063\n","recipe flavour dish version perfect give make find prefer taste suggests slightly add book variety texture result thing sauce adding \n"," \n","Topic: 21\n","Topic Weight: 0.134\n","meat chicken pork lamb sauce fat oven cook beef hour cooking marinade roast cut duck skin bone pan minute piece \n"," \n","Topic: 22\n","Topic Weight: 0.169\n","salad leaf dressing beetroot olive_oil vegetable green asparagus lemon vinegar pea season oil carrot herb cut cauliflower fennel toss artichoke \n"," \n","Topic: 23\n","Topic Weight: 0.201\n","food home day time family love make made eat child kitchen cooking cook friend back thing year meal recipe lot \n"," \n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"OyZjIWMxLYRm","colab_type":"code","colab":{}},"source":["# Append name of topic to each topic number\n","def GetTopicName(topic_number):\n","    mallet_keywords = []\n","    mallet_topic_name = []\n","    \n","    for i in topic_number:\n","        if i == 0:\n","            mallet_keywords.append(mallet_keys.keywords[0])\n","            mallet_topic_name.append('Breakfast')\n","        elif i == 1:\n","            mallet_keywords.append(mallet_keys.keywords[1])\n","            mallet_topic_name.append('Drinks & Cocktails')\n","        elif i == 2:\n","            mallet_keywords.append(mallet_keys.keywords[2])\n","            mallet_topic_name.append('Fruits - Juices')\n","        elif i == 3:\n","            mallet_keywords.append(mallet_keys.keywords[3])\n","            mallet_topic_name.append('Breads & Dough')\n","        elif i == 4:\n","            mallet_keywords.append(mallet_keys.keywords[4])\n","            mallet_topic_name.append('other')\n","        elif i == 5:\n","            mallet_keywords.append(mallet_keys.keywords[5])\n","            mallet_topic_name.append('Vegetables')\n","        elif i == 6:\n","            mallet_keywords.append(mallet_keys.keywords[6])\n","            mallet_topic_name.append('other')\n","        elif i == 7:\n","            mallet_keywords.append(mallet_keys.keywords[7])\n","            mallet_topic_name.append('Asian Style')\n","        elif i == 8:\n","            mallet_keywords.append(mallet_keys.keywords[8])\n","            mallet_topic_name.append('Pasta - Italian Recipes')\n","        elif i == 9:\n","            mallet_keywords.append(mallet_keys.keywords[9])    \n","            mallet_topic_name.append('Cakes & Puddings')\n","        elif i == 10:\n","            mallet_keywords.append(mallet_keys.keywords[10])\n","            mallet_topic_name.append('other')     \n","        elif i == 11:\n","            mallet_keywords.append(mallet_keys.keywords[11])\n","            mallet_topic_name.append('Cheese & Ham - Sandwich & Toasts')\n","        elif i == 12:\n","            mallet_keywords.append(mallet_keys.keywords[12])\n","            mallet_topic_name.append('Eggs & Omelette')\n","        elif i == 13:\n","            mallet_keywords.append(mallet_keys.keywords[13])\n","            mallet_topic_name.append('Cakes & Biscuits')\n","        elif i == 14:\n","            mallet_keywords.append(mallet_keys.keywords[14])\n","            mallet_topic_name.append('Soups')     \n","        elif i == 15:\n","            mallet_keywords.append(mallet_keys.keywords[15])\n","            mallet_topic_name.append('Curry')\n","        elif i == 16:\n","            mallet_keywords.append(mallet_keys.keywords[16])\n","            mallet_topic_name.append('other')\n","        elif i == 17:\n","            mallet_keywords.append(mallet_keys.keywords[17])\n","            mallet_topic_name.append('Fish & Seafood')\n","        elif i == 18:\n","            mallet_keywords.append(mallet_keys.keywords[18])\n","            mallet_topic_name.append('Sides')\n","        elif i == 19:\n","            mallet_keywords.append(mallet_keys.keywords[19])\n","            mallet_topic_name.append('Pie, Pastry & Tart')\n","        elif i == 20:\n","            mallet_keywords.append(mallet_keys.keywords[20])\n","            mallet_topic_name.append('other')\n","        elif i == 21:\n","            mallet_keywords.append(mallet_keys.keywords[21])\n","            mallet_topic_name.append('Meat')\n","        elif i == 22:\n","            mallet_keywords.append(mallet_keys.keywords[22])\n","            mallet_topic_name.append('Vegetables')\n","        elif i == 23:\n","            mallet_keywords.append(mallet_keys.keywords[23])\n","            mallet_topic_name.append('Family - Home Cooking')\n","\n","    return mallet_topic_name, mallet_keywords"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5yRbFDLLQixC","colab_type":"code","colab":{}},"source":["mallet_1st_name, mallet_1st_keywords = GetTopicName(mallet_topics_df['topic_1_mallet'])\n","\n","mallet_2nd_name, mallet_2nd_keywords = GetTopicName(mallet_topics_df['topic_2_mallet'])\n","\n","mallet_3rd_name, mallet_3rd_keywords = GetTopicName(mallet_topics_df['topic_3_mallet'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9LrehC4qRNld","colab_type":"code","colab":{}},"source":["mallet_lem_final = pd.DataFrame()\n","#1st topic\n","mallet_lem_final['topic_1_mallet'] = mallet_topics_df['topic_1_mallet']\n","mallet_lem_final['topic_1_mallet_category'] = mallet_1st_name\n","mallet_lem_final['topic_1_mallet_perc'] = mallet_topics_df['topic_1_mallet_perc']\n","#2nd topic_mallet\n","mallet_lem_final['topic_2_mallet'] = mallet_topics_df['topic_2_mallet']\n","mallet_lem_final['topic_2_mallet_category'] = mallet_2nd_name\n","mallet_lem_final['topic_2_mallet_perc'] = mallet_topics_df['topic_2_mallet_perc']\n","# 3rd topic_mallet\n","mallet_lem_final['topic_3_mallet'] = mallet_topics_df['topic_3_mallet']\n","mallet_lem_final['topic_3_mallet_category'] = mallet_3rd_name\n","mallet_lem_final['topic_3_mallet_perc'] = mallet_topics_df['topic_3_mallet_perc']\n","\n","mallet_lem_final['keywords_1_mallet'] = mallet_1st_keywords\n","mallet_lem_final['keywords_2_mallet'] = mallet_2nd_keywords\n","mallet_lem_final['keywords_3_mallet'] = mallet_3rd_keywords"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"iWZlBxuARZ7l","colab_type":"code","outputId":"77b5e75f-909f-4c0e-d953-cba68c1244f1","executionInfo":{"status":"ok","timestamp":1574292107011,"user_tz":0,"elapsed":732,"user":{"displayName":"Aude Vuilli","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBvb7DVNjMBgsPLogqP6L69Z5SUiqMzjmazn2aI=s64","userId":"08053235329720588301"}},"colab":{"base_uri":"https://localhost:8080/","height":164}},"source":["mallet_lem_final.head(1)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>topic_1_mallet</th>\n","      <th>topic_1_mallet_category</th>\n","      <th>topic_1_mallet_perc</th>\n","      <th>topic_2_mallet</th>\n","      <th>topic_2_mallet_category</th>\n","      <th>topic_2_mallet_perc</th>\n","      <th>topic_3_mallet</th>\n","      <th>topic_3_mallet_category</th>\n","      <th>topic_3_mallet_perc</th>\n","      <th>keywords_1_mallet</th>\n","      <th>keywords_2_mallet</th>\n","      <th>keywords_3_mallet</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>14</td>\n","      <td>Soups</td>\n","      <td>0.240209</td>\n","      <td>12</td>\n","      <td>Eggs &amp; Omelette</td>\n","      <td>0.198616</td>\n","      <td>4</td>\n","      <td>other</td>\n","      <td>0.120674</td>\n","      <td>onion cook minute pan stir stock soup butter heat chopped water large garlic...</td>\n","      <td>egg pan potato oil make batter cook butter flour heat fry hot pancake milk p...</td>\n","      <td>make good time flavour give dont thing bit ingredient day taste recipe find ...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   topic_1_mallet topic_1_mallet_category  topic_1_mallet_perc  \\\n","0              14                   Soups             0.240209   \n","\n","   topic_2_mallet topic_2_mallet_category  topic_2_mallet_perc  \\\n","0              12         Eggs & Omelette             0.198616   \n","\n","   topic_3_mallet topic_3_mallet_category  topic_3_mallet_perc  \\\n","0               4                   other             0.120674   \n","\n","                                                                 keywords_1_mallet  \\\n","0  onion cook minute pan stir stock soup butter heat chopped water large garlic...   \n","\n","                                                                 keywords_2_mallet  \\\n","0  egg pan potato oil make batter cook butter flour heat fry hot pancake milk p...   \n","\n","                                                                 keywords_3_mallet  \n","0  make good time flavour give dont thing bit ingredient day taste recipe find ...  "]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"markdown","metadata":{"id":"gVttqV-DS5dC","colab_type":"text"},"source":["#### Merge DataFrames"]},{"cell_type":"code","metadata":{"id":"6myUU9HkToin","colab_type":"code","colab":{}},"source":["## Merge both dataframe\n","# Append Index column to mallet_lem_final\n","data_end = pd.concat([data_merge_ldagensim,mallet_lem_final],axis=1,join='inner')\n","data_end.head(2)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"8EJxBk5tUFMM","colab_type":"code","colab":{}},"source":["#data_end.to_csv('drive/My Drive/Personal Projects/2019/Guardian/data/lda_topics.csv')\n","mallet_lem_final.to_csv('drive/My Drive/Personal Projects/2019/Guardian/data/malletlda_topics.csv')"],"execution_count":0,"outputs":[]}]}